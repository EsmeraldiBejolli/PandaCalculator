/*! grid */
/// <reference path="variables.less" />
/// <reference path="mixins.less" />
/// <reference path="site.less" />
/// <reference path="font-icons.less" />
/// <reference path="mixins-font.less" />

@column-width: @grid-column-width;
@gutter-width: @grid-gutter-width;
@columns: @grid-columns;

@grid-width: (@column-width * @columns) + (@gutter-width * @columns) * 1px;
@grid-inner-width: (@column-width * @columns) + (@gutter-width * @columns - 1) * 1px;
@total: @grid-width;
@total: 100%;
@totalFixed: @grid-width;

.column(@x, @columns: @columns) {
    float: left;
    margin-left: @total * ((@gutter-width * .5) / @grid-width);
    margin-right: @total * ((@gutter-width * .5) / @grid-width);
    width: @total * ((((@x * @column-width) + (@x * @gutter-width)) - @gutter-width) / @grid-width);
}

.column-fixed(@x, @columns: @columns, @float: left) {
    float: @float;
    margin-left: @totalFixed * ((@gutter-width * .5) / @grid-width);
    margin-right: @totalFixed * ((@gutter-width * .5) / @grid-width);
    width: @totalFixed * ((((@x * @column-width) + (@x * @gutter-width)) - @gutter-width) / @grid-width);
}

.column-centered(@x, @columns: @columns) {
    margin-left: auto;
    margin-right: auto;
    //width: @totalFixed * ((((@x * @column-width) + (@x * @gutter-width)) - @gutter-width) / @grid-width);
    width: @total * ((((@x * @column-width) + (@x * @gutter-width)) - @gutter-width) / @grid-width);
}

.column-centered-fixed(@x, @columns: @columns) {
    margin-left: auto;
    margin-right: auto;
    width: @grid-inner-width * ((((@x * @column-width) + (@x * @gutter-width)) - @gutter-width) / @grid-width);
}


.row(@columns: @columns) {
    float: left;
    margin-left: @total * ((@gutter-width * -.5) / @grid-width);
    margin-right: @total * ((@gutter-width * -.5) / @grid-width);
    .row-width(@columns);
}

.row-width(@columns: @columns) when (ispixel(@total)) {
    width: @total;
}

.row-width(@columns: @columns) when (ispercentage(@total)) {
    width: @total * (@grid-width / (@grid-width - @gutter-width));
}

.push(@offset: 1) {
    margin-left: @total * (((@gutter-width + @column-width) * @offset) / @grid-width) + @total * ((@gutter-width * .5) / @grid-width);
}

.pull(@offset: 1) {
    margin-right: @total * (((@gutter-width + @column-width) * @offset) / @grid-width) + @total * ((@gutter-width * .5) / @grid-width);
}

// Looping for Columns, Rows, Pull and Push
.createColumns(@columns);
.createRows(@columns);
.createPulls(@columns);
.createPushes(@columns);

.row {
    .row(@columns);
}

.createColumns(@n, @i: 1) when (@i =< @n) {
    .col-@{i} {
        .column(@i);
    }

    .createColumns(@n, (@i + 1));
}

.createRows(@n, @i: 1) when (@i =< @n) {
    .row-@{i} {
        .row(@i);
    }

    .createRows(@n, (@i + 1));
}

.createPulls(@n, @i: 1) when (@i =< @n) {
    .pull-@{i} {
        .pull(@i);
    }

    .createPulls(@n, (@i + 1));
}

.createPushes(@n, @i: 1) when (@i =< @n) {
    .push-@{i} {
        .push(@i);
    }

    .createPushes(@n, (@i + 1));
}

// Looping for Columns, Rows, Pull and Push
.createFixedColumns(@columns);

.createFixedColumns(@n, @i: 1) when (@i =< @n) {
    .col-@{i}-fixed {
        .column-fixed(@i);
    }

    .createFixedColumns(@n, (@i + 1));
}

/* DEPRECATED - use e.g. `column-centered` instead */
.centeredList(@font-size: 0) {
    display: inline-block;
    text-align: center;
    font-size: @font-size;
}

.centeredListItems() {
    float: none;
    text-align: center;
    display: inline-block;
}

@media (max-width: @desktop) {
    .row {
        float: left;
        margin-left: 0;
        margin-right: 0;
        width: 100%;
    }
}
